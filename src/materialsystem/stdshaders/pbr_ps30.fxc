//==================================================================================================
//
// Physically Based Rendering pixel shader for brushes and models
//
//==================================================================================================

// STATIC: "FLASHLIGHT"                 "0..1"
// STATIC: "FLASHLIGHTDEPTHFILTERMODE"  "0..2"
// STATIC: "LIGHTMAPPED"                "0..1"
// STATIC: "EMISSIVE"                   "0..1"
// STATIC: "PARALLAXOCCLUSION"          "0..1"
// STATIC: "WVT"                        "0..1"
// STATIC: "HSV"                        "0..1"
// STATIC: "HSV_BLEND"                  "0..1"
// STATIC: "PARALLAXCORRECT"            "0..1"
// STATIC: "BLENDTINTBYMRAOALPHA"       "0..1"
// STATIC: "PARALLAXDITHER"             "0..1"
// STATIC: "EMISSIVEFRESNEL"            "0..1"

// DYNAMIC: "NUM_LIGHTS"                "0..4"
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"  "0..1"
// DYNAMIC: "FLASHLIGHTSHADOWS"         "0..1"

// We don't care about flashlight depth unless the flashlight is on
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTSHADOWS == 1 )
// Flashlight shadow filter mode is irrelevant if there is no flashlight
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTDEPTHFILTERMODE != 0 )

// SKIP: ( $PARALLAXOCCLUSION == 0 ) && ( $PARALLAXDITHER != 0 )
// SKIP: ( $EMISSIVE == 0 ) && ( $EMISSIVEFRESNEL != 0 )
// SKIP: ( $FLASHLIGHT == 1 ) && ( $EMISSIVEFRESNEL != 0 )

// SKIP: !$HSV && $HSV_BLEND

#include "common_ps_fxc.h"
#include "common_fog_ps_fxc.h"
#include "common_flashlight_fxc.h"
#define PIXELSHADER
#define PS_INPUT PS_INPUT_LG
#include "common_lightmappedgeneric_fxc.h"
#undef PS_INPUT
#include "shader_constant_register_map.h"
#include "common_vertexlitgeneric_dx9.h"

#include "pbr_common_ps2_3_x.h"

const float4 g_DiffuseModulation                : register(PSREG_DIFFUSE_MODULATION);
const float4 g_ShadowTweaks                     : register(PSREG_ENVMAP_TINT__SHADOW_TWEAKS);
const float3 cAmbientCube[6]                    : register(PSREG_AMBIENT_CUBE);
const float4 g_EyePos                           : register(PSREG_EYEPOS_SPEC_EXPONENT);
#define g_EnvMapLod g_EyePos.a
const float4 g_FogParams                        : register(PSREG_FOG_PARAMS);
const float4 g_FlashlightAttenuationFactors     : register(PSREG_FLASHLIGHT_ATTENUATION);
const float4 g_FlashlightPos                    : register(PSREG_FLASHLIGHT_POSITION_RIM_BOOST);
const float4x4 g_FlashlightWorldToTexture       : register(PSREG_FLASHLIGHT_TO_WORLD_TEXTURE);
PixelShaderLightInfo cLightInfo[3]              : register(PSREG_LIGHT_INFO_ARRAY);         // 2 registers each - 6 registers total (4th light spread across w's)
const float4 g_EmissionScale                    : register(PSREG_SELFILLUMTINT);

#if PARALLAXCORRECT
const float3 g_cubemapPos : register( c3 );
const float4x4 g_obbMatrix : register( c26 ); // Through c29
#endif

const float4 g_MraoScale                : register( c33 );
#define g_LightMapScale g_MraoScale.w
const float4 g_Mrao2Scale               : register( c34 );

#if EMISSIVEFRESNEL
const float4 g_EmissiveFresnelParams    : register( c35 );
#endif

#define g_HsvParams cFlashlightScreenScale
const float4 g_Emission2Scale           : register( c36 );

#if PARALLAXOCCLUSION
const int g_nParallaxSamples                    : register( c32 );
#define g_ParallaxDepth                         g_HsvParams.x
#define g_ParallaxCenter                        g_Mrao2Scale.y
#define g_parallaxDitherScale                   g_EmissionScale.w
#endif

sampler BaseTextureSampler          : register(s0);     // Base map, selfillum in alpha
sampler NormalTextureSampler        : register(s1);     // Normal map
sampler EnvmapSampler               : register(s2);     // Cubemap
sampler ShadowDepthSampler          : register(s4);     // Flashlight shadow depth map sampler
sampler RandRotSampler              : register(s5);     // RandomRotation sampler
sampler FlashlightSampler           : register(s6);     // Flashlight cookie
sampler LightmapSampler             : register(s7);     // Lightmap
sampler BrdfIntegrationSampler      : register(s8);
sampler MRAOTextureSampler          : register(s10);    // MRAO texture
#if EMISSIVE
sampler EmissionTextureSampler      : register(s11);    // Emission texture
#endif

#if WVT
sampler Base2TextureSampler         : register(s3);
sampler Normal2TextureSampler       : register(s12);
sampler MRAO2TextureSampler         : register(s13);
#if EMISSIVE
sampler Emission2TextureSampler     : register(s14);
#endif
#endif

struct PS_INPUT
{
	float2 baseTexCoord             : TEXCOORD0;
	float4 lightAtten               : TEXCOORD1;
	float3 worldNormal              : TEXCOORD2;
	float3 worldPos                 : TEXCOORD3;
	float3 projPos                  : TEXCOORD4;
	float4 lightmapTexCoord1And2    : TEXCOORD5;
	float4 lightmapTexCoord3        : TEXCOORD6;
#if WVT
	float blend                     : COLOR0;
#endif
};

#if PARALLAXOCCLUSION
#if !WVT
float2 ParallaxCorrect(float2 texCoord, float3 viewRelativeDir, sampler depthSampler, float parallaxDepth, float parallaxCenter, float2 pixelPos)
#else
float2 ParallaxCorrect(float2 texCoord, float3 viewRelativeDir, sampler depthSampler, sampler depthSampler2, float blend, float parallaxDepth, float parallaxCenter, float2 pixelPos)
#endif
{
	float fLength = length( viewRelativeDir );
	float fParallaxLength = sqrt( fLength * fLength - viewRelativeDir.z * viewRelativeDir.z ) / viewRelativeDir.z; 
	float2 vParallaxDirection = normalize( viewRelativeDir.xy );
	float2 vParallaxOffsetTS = vParallaxDirection * fParallaxLength;
	vParallaxOffsetTS *= parallaxDepth;

	float fDithering = ScreenSpaceBayerDither( pixelPos ).x;

	 // Compute all the derivatives:
	float2 dx = ddx( texCoord );
	float2 dy = ddy( texCoord );

	const int nMaxSamples = g_nParallaxSamples;

	int nNumSteps = nMaxSamples * smoothstep(0, 0.1, parallaxDepth);

	// DTAAPOM: https://michaelfahelartprocessblog.blogspot.com/2020/09/dtaapom-dither-temporal-anti-aliasing.html
#if PARALLAXDITHER
	nNumSteps = 1.5 * (fDithering * g_parallaxDitherScale * nNumSteps) + (nNumSteps / 2.0);
#endif

	float fCurrHeight = 0.0;
	float fStepSize   = 1.0 / (float) nNumSteps;
	float fPrevHeight = 1.0;

	float2 vTexOffsetPerStep = fStepSize * vParallaxOffsetTS;
	float2 vTexCurrentOffset = texCoord + vTexOffsetPerStep;
	float  fCurrentBound     = 1.0;

	float2 pt1 = 0;
	float2 pt2 = 0;
	int    nStepIndex = 0;

	[loop]
	while ( nStepIndex < nNumSteps ) 
	{
		vTexCurrentOffset -= vTexOffsetPerStep;

		// Sample height map which in this case is stored in the alpha channel of the normal map:
#if !WVT
		fCurrHeight = parallaxCenter + tex2Dsrgbgrad( depthSampler, vTexCurrentOffset, dx, dy ).a;
#else
		fCurrHeight = parallaxCenter + lerp( tex2Dsrgbgrad( depthSampler, vTexCurrentOffset, dx, dy ).a, tex2Dsrgbgrad( depthSampler2, vTexCurrentOffset, dx, dy ).a, blend );
#endif

		fCurrentBound -= fStepSize;
		if ( fCurrHeight > fCurrentBound ) 
		{     
			fCurrentBound += fStepSize;
			pt1 = float2( fCurrentBound, fCurrHeight );
			pt2 = float2( fCurrentBound + fStepSize, fPrevHeight );

			nStepIndex = nNumSteps + 1;
		}
		else
		{
			nStepIndex++;
			fPrevHeight = fCurrHeight;
		}
	}   // End of while ( nStepIndex < nNumSteps )

	float fDelta2 = pt2.x - pt2.y;
	float fDelta1 = pt1.x - pt1.y;
	float fParallaxAmount = ( pt1.x * fDelta2 - pt2.x * fDelta1 ) / ( fDelta2 - fDelta1 );
	float2 vParallaxOffset = vParallaxOffsetTS * ( 1 - fParallaxAmount );
	// The computed texture offset for the displaced point on the pseudo-extruded surface:
	return texCoord - vParallaxOffset;
}
#endif

// Entry point
float4 main(PS_INPUT i) : COLOR
{
	float3 surfNormal = normalize(i.worldNormal);
	float3 surfTangent;
	float3 surfBase; 
	float flipSign;
	float3x3 normalBasis = ComputeTangentFrame(surfNormal, i.worldPos, i.baseTexCoord , surfTangent, surfBase, flipSign);

#if PARALLAXOCCLUSION
	float2 pixelPos = i.projPos.xy;

	float3 outgoingLightRay = g_EyePos.xyz - i.worldPos;
	float3 outgoingLightDirectionTS = WorldToRelative( outgoingLightRay, surfTangent, surfBase, surfNormal);
#if WVT
	float2 correctedTexCoord = ParallaxCorrect(i.baseTexCoord, outgoingLightDirectionTS, NormalTextureSampler, Normal2TextureSampler, i.blend, g_ParallaxDepth, g_ParallaxCenter, pixelPos);
#else
	float2 correctedTexCoord = ParallaxCorrect(i.baseTexCoord, outgoingLightDirectionTS, NormalTextureSampler, g_ParallaxDepth, g_ParallaxCenter, pixelPos);
#endif
#else
	float2 correctedTexCoord = i.baseTexCoord;
#endif

#if WVT
	float4 albedo = lerp(tex2Dsrgb(BaseTextureSampler, correctedTexCoord), tex2Dsrgb(Base2TextureSampler, correctedTexCoord), i.blend);
#else
	float4 albedo = tex2Dsrgb(BaseTextureSampler, correctedTexCoord);
#endif

#if WVT
	float4 mrao = lerp(tex2D(MRAOTextureSampler, correctedTexCoord) * float4(g_MraoScale.xyz, 1), tex2D(MRAO2TextureSampler, correctedTexCoord) * float4(g_Mrao2Scale.xyz, 1), i.blend);
#else
	float4 mrao = tex2D(MRAOTextureSampler, correctedTexCoord) * float4(g_MraoScale.xyz, 1);
#endif

	// Blend diffuse modulation by alpha in mrao (if requested)
#if BLENDTINTBYMRAOALPHA
	albedo.rgba *= lerp( g_DiffuseModulation.rgba, float4( 1.0f, 1.0f, 1.0f, 1.0f ), mrao.w );
#else
	albedo.rgba *= g_DiffuseModulation.rgba;
#endif

	float alpha = albedo.a;

#if WVT
	float3 textureNormal = normalize((lerp(tex2D( NormalTextureSampler, correctedTexCoord).xyz, tex2D( Normal2TextureSampler, correctedTexCoord).xyz, i.blend) - float3(0.5, 0.5, 0.5)) * 2);
#else
	float3 textureNormal = normalize((tex2D( NormalTextureSampler,  correctedTexCoord).xyz - float3(0.5, 0.5, 0.5)) * 2);
#endif
	float3 normal = normalize(mul(textureNormal, normalBasis)); // World Normal

	float metalness = saturate(mrao.x), roughness = saturate(mrao.y), ambientOcclusion = saturate(mrao.z);

#if EMISSIVE
#if WVT
	float3 emission = lerp(tex2Dsrgb(EmissionTextureSampler, correctedTexCoord).xyz * g_EmissionScale.xyz, tex2Dsrgb(Emission2TextureSampler, correctedTexCoord).xyz * g_Emission2Scale.xyz, i.blend);
#else
	float3 emission = tex2Dsrgb(EmissionTextureSampler, correctedTexCoord).xyz  * g_EmissionScale.xyz;
#endif
#if HSV
	float3 emissionHSV = rgb2hsv(emission);
	emissionHSV.x = fmod(emissionHSV.x + g_HsvParams.x, 1.0);
	emissionHSV.yz = clamp(emissionHSV.yz * g_HsvParams.yz, 0.0, 1.0);
#if !HSV_BLEND
	emission.xyz = hsv2rgb(emissionHSV);
#else
	emission.xyz = lerp(emission.xyz, hsv2rgb(emissionHSV), mrao.w);
#endif
#endif
#endif

#if HSV
	float3 albedoHSV = rgb2hsv(albedo.rgb);
	albedoHSV.x = fmod(albedoHSV.x + g_HsvParams.x, 1.0);
	albedoHSV.yz = clamp(albedoHSV.yz * g_HsvParams.yz, 0.0, 1.0);
#if !HSV_BLEND
	albedo.xyz = hsv2rgb(albedoHSV);
#else
	albedo.xyz = lerp(albedo.xyz, hsv2rgb(albedoHSV), mrao.w);
#endif
#endif

	textureNormal.y *= flipSign; // Fixup textureNormal for ambient lighting

	float3 outgoingLightDirection = normalize(g_EyePos.xyz - i.worldPos); // Lo
	float lightDirectionAngle = saturate(dot(normal, outgoingLightDirection)); // cosLo

	float3 specularReflectionVector = 2.0 * lightDirectionAngle * normal - outgoingLightDirection; // Lr

	float3 dielectricCoefficient = 0.04; // F0 dielectric
	float3 fresnelReflectance = lerp(dielectricCoefficient, albedo.rgb, metalness); // F0

#if EMISSIVEFRESNEL
	// Fresnel ranges but with a custom exponent; set w to 2 for traditional Source Engine Fresnel ranges.
	float emissiveFresnel = 1.0f - saturate( dot( normal, outgoingLightDirection ) );
	emissiveFresnel = pow( emissiveFresnel, g_EmissiveFresnelParams.w );
	if (emissiveFresnel > 0.5f)
		emission.rgb *= lerp( g_EmissiveFresnelParams.y, g_EmissiveFresnelParams.z, ( 2.0f * emissiveFresnel ) - 1.0f );
	else
		emission.rgb *= lerp( g_EmissiveFresnelParams.x, g_EmissiveFresnelParams.y, 2.0f * emissiveFresnel );
#endif

	// Prepare ambient and direct
	float3 ambientLighting = 0.0;
	float3 directLighting = 0.0;

#if !FLASHLIGHT

	float4 modul = g_DiffuseModulation;
#if HSV
	float3 modulHSV = rgb2hsv(modul.rgb);
	modulHSV.x = fmod(modulHSV.x + g_HsvParams.x, 1.0);
	modulHSV.yz = clamp(modulHSV.yz * g_HsvParams.yz, 0.0, 1.0);
#if !HSV_BLEND
	modul.xyz = hsv2rgb(modulHSV);
#else
	modul.xyz = lerp(modul.xyz, hsv2rgb(modulHSV), mrao.w);
#endif
#endif

#ifdef LIGHTMAPPED
	modul *= g_LightMapScale;
#endif

	// Start ambient
	float3 diffuseIrradiance = AmbientLookup(i.worldPos, normal, cAmbientCube, textureNormal, i.lightmapTexCoord1And2, i.lightmapTexCoord3, LightmapSampler, modul, 1.0f);
	float3 ambientLightingFresnelTerm = FresnelSchlickRoughness(fresnelReflectance, lightDirectionAngle, roughness); // F

	float3 diffuseContributionFactor = lerp(1 - ambientLightingFresnelTerm, 0, metalness); ; // kd
	float3 diffuseIBL = diffuseContributionFactor * albedo.rgb * diffuseIrradiance;

#if PARALLAXCORRECT
	float3 positionLS = mul(float4(i.worldPos, 1), g_obbMatrix);
	float3 rayLS = mul(specularReflectionVector, (float3x3) g_obbMatrix);

	float3 firstPlaneIntersect = (float3(1.0f, 1.0f, 1.0f) - positionLS) / rayLS;
	float3 secondPlaneIntersect = (-positionLS) / rayLS;
	float3 furthestPlane = max(firstPlaneIntersect, secondPlaneIntersect);
	float dist = min(furthestPlane.x, min(furthestPlane.y, furthestPlane.z));

	// Use distance in WS directly to recover intersection
	float3 intersectPositionWS = i.worldPos + specularReflectionVector * dist;
	specularReflectionVector = intersectPositionWS - g_cubemapPos;

	// The normalize here is important, PixelShaderAmbientLight() below expects a normalized direction as input
	specularReflectionVector = normalize(intersectPositionWS - g_cubemapPos);
#endif

	float3 lookupHigh = ENV_MAP_SCALE * tex2Dsrgblod(EnvmapSampler, float4(specularReflectionVector, roughness * g_EnvMapLod)).xyz;
	float3 lookupLow = PixelShaderAmbientLight(specularReflectionVector, cAmbientCube);
	float3 specularIrradiance = lerp(lookupHigh, lookupLow, roughness * roughness);
	float2 AB = tex2Dlod(BrdfIntegrationSampler, float4(lightDirectionAngle, roughness, 0.0f, 0.0f)).rg;
	float3 specularIBL = specularIrradiance * ( fresnelReflectance * AB.x + AB.y );

	ambientLighting = (diffuseIBL + specularIBL) * ambientOcclusion;
	// End ambient

#if !LIGHTMAPPED
	// Start direct
	for (uint n = 0; n < NUM_LIGHTS; ++n)
	{
		float3 LightIn = normalize(PixelShaderGetLightVector(i.worldPos, cLightInfo, n));
		float3 LightColor = PixelShaderGetLightColor(cLightInfo, n) * GetAttenForLight(i.lightAtten, n); // Li

		directLighting += CalculateLight(LightIn, LightColor, outgoingLightDirection,
			normal, fresnelReflectance, roughness, metalness, lightDirectionAngle, albedo.rgb);
	}
	// End direct
#endif

#else

	// Start flashlight
	float4 flashlightSpacePosition = mul(float4(i.worldPos, 1.0), g_FlashlightWorldToTexture);
	clip( flashlightSpacePosition.w ); // Stop projected textures from projecting backwards (only really happens if they have a big FOV because they get frustum culled)
	float3 vProjCoords = flashlightSpacePosition.xyz / flashlightSpacePosition.w;

	float3 delta = g_FlashlightPos.xyz - i.worldPos;
	float distSquared = dot(delta, delta);
	float dist = sqrt(distSquared);

	float3 flashlightColor = tex2Dsrgb(FlashlightSampler, vProjCoords.xy);
	flashlightColor *= cFlashlightColor.xyz;

#if FLASHLIGHTSHADOWS
	float flashlightShadow = DoFlashlightShadow(ShadowDepthSampler, RandRotSampler, vProjCoords, i.projPos, FLASHLIGHTDEPTHFILTERMODE, g_ShadowTweaks, true);
	float flashlightAttenuated = lerp(flashlightShadow, 1.0, g_ShadowTweaks.y);         // Blend between fully attenuated and not attenuated
	float fAtten = saturate(dot(g_FlashlightAttenuationFactors.xyz, float3(1.0, 1.0 / dist, 1.0 / distSquared)));
	flashlightShadow = saturate(lerp(flashlightAttenuated, flashlightShadow, fAtten));  // Blend between shadow and above, according to light attenuation

	flashlightColor *= flashlightShadow;
#endif
	float farZ = g_FlashlightAttenuationFactors.w;
	float endFalloffFactor = RemapValClamped(dist, farZ, 0.6 * farZ, 0.0, 1.0);

	float3 flashLightIntensity = flashlightColor * endFalloffFactor;
		
	float3 flashLightIn = normalize(g_FlashlightPos.xyz - i.worldPos);

	directLighting += max(0, CalculateLight(flashLightIn, flashLightIntensity, outgoingLightDirection,
		normal, fresnelReflectance, roughness, metalness, lightDirectionAngle, albedo.rgb));
	// End flashlight

#endif // !FLASHLIGHT

	float fogFactor = CalcPixelFogFactor(PIXELFOGTYPE, g_FogParams, g_EyePos.xyz, i.worldPos.xyz, i.projPos.z);

	float3 combinedLighting = directLighting + ambientLighting;
#if EMISSIVE && !FLASHLIGHT
	combinedLighting += emission;
#endif

	return FinalOutput(float4(combinedLighting, alpha), fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, WRITE_DEPTH_TO_DESTALPHA, i.projPos.z);
}
